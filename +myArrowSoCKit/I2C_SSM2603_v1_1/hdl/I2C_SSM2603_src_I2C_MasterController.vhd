-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hdlcoder_I2C_ssm2603\I2C_SSM2603_src_I2C_MasterController.vhd
-- Created: 2020-11-19 16:06:43
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: I2C_SSM2603_src_I2C_MasterController
-- Source Path: hdlcoder_I2C_ssm2603/I2C_SSM2603/I2C_MasterController
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY I2C_SSM2603_src_I2C_MasterController IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1                             :   IN    std_logic;
        rd_wr                             :   IN    std_logic;
        mode                              :   IN    std_logic;
        slv_addr                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        reg_addr                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        reg_byte_mode                     :   IN    std_logic;
        reg_data0                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        busy                              :   OUT   std_logic;
        I2C_SCL                           :   OUT   std_logic;
        I2C_SDA                           :   INOUT std_logic;
        n_ack                             :   OUT   std_logic
        );
END I2C_SSM2603_src_I2C_MasterController;


ARCHITECTURE rtl OF I2C_SSM2603_src_I2C_MasterController IS

  -- Component Declarations
  COMPONENT i2c_bidir
    PORT( I2C_CLK                         :   IN    std_logic;
          I2C_DATA                        :   IN    std_logic;
          ack                             :   IN    std_logic;
          I2C_SCL                         :   OUT   std_logic;
          I2C_SDA                         :   INOUT std_logic;
          sda_local                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT I2C_SSM2603_src_i2c_mstr
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1                           :   IN    std_logic;
          rd_wr                           :   IN    std_logic;
          mode                            :   IN    std_logic;
          slv_addr                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          reg_addr                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          reg_addr_burstIn                :   IN    std_logic;
          reg_data                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          sda_in                          :   IN    std_logic;
          busy                            :   OUT   std_logic;
          scl                             :   OUT   std_logic;
          sda                             :   OUT   std_logic;
          ack                             :   OUT   std_logic;
          n_ack                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : I2C_SSM2603_src_i2c_mstr
    USE ENTITY work.I2C_SSM2603_src_i2c_mstr(rtl);

  -- Signals
  SIGNAL scl                              : std_logic;
  SIGNAL sda                              : std_logic;
  SIGNAL ack                              : std_logic;
  SIGNAL i2c_bidir_out1                   : std_logic;
  SIGNAL i2c_bidir_out3                   : std_logic;
  SIGNAL sda_local_out1                   : std_logic;
  SIGNAL busy_1                           : std_logic;
  SIGNAL n_ack_1                          : std_logic;
  SIGNAL busy_dly_out1                    : std_logic;
  SIGNAL n_ack_dly_out1                   : std_logic;

BEGIN
  u_i2c_bidir : i2c_bidir
    PORT MAP( I2C_CLK => scl,
              I2C_DATA => sda,
              ack => ack,
              I2C_SCL => i2c_bidir_out1,
              I2C_SDA => I2C_SDA,
              sda_local => i2c_bidir_out3
              );

  u_i2c_mstr : I2C_SSM2603_src_i2c_mstr
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1 => enb_1,
              rd_wr => rd_wr,
              mode => mode,
              slv_addr => slv_addr,  -- uint8
              reg_addr => reg_addr,  -- uint8
              reg_addr_burstIn => reg_byte_mode,
              reg_data => reg_data0,  -- uint8
              sda_in => sda_local_out1,
              busy => busy_1,
              scl => scl,
              sda => sda,
              ack => ack,
              n_ack => n_ack_1
              );

  sda_local_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sda_local_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sda_local_out1 <= i2c_bidir_out3;
      END IF;
    END IF;
  END PROCESS sda_local_process;


  busy_dly_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      busy_dly_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        busy_dly_out1 <= busy_1;
      END IF;
    END IF;
  END PROCESS busy_dly_process;


  n_ack_dly_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      n_ack_dly_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        n_ack_dly_out1 <= n_ack_1;
      END IF;
    END IF;
  END PROCESS n_ack_dly_process;


  busy <= busy_dly_out1;

  I2C_SCL <= i2c_bidir_out1;

  n_ack <= n_ack_dly_out1;

END rtl;

