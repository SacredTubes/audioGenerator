-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hdlcoder_I2C_ssm2603\I2C_SSM2603_src_i2c_cfg.vhd
-- Created: 2020-11-19 16:06:43
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: I2C_SSM2603_src_i2c_cfg
-- Source Path: hdlcoder_I2C_ssm2603/I2C_SSM2603/i2c_cfg
-- Hierarchy Level: 1
-- 
-- I2C Configuration for SSM2603
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.I2C_SSM2603_src_I2C_SSM2603_pkg.ALL;

ENTITY I2C_SSM2603_src_i2c_cfg IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        busy                              :   IN    std_logic;
        n_ack                             :   IN    std_logic;
        enb_1                             :   OUT   std_logic;
        rw                                :   OUT   std_logic;
        mode                              :   OUT   std_logic;
        slv_addr                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        reg_addr                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        reg_byte_mode                     :   OUT   std_logic;
        databyte                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        MUTEN                             :   OUT   std_logic
        );
END I2C_SSM2603_src_i2c_cfg;


ARCHITECTURE rtl OF I2C_SSM2603_src_i2c_cfg IS

  ATTRIBUTE multstyle : string;

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL is_i2c_cfg                       : T_state_type_is_i2c_cfg;  -- uint8
  SIGNAL inc_in                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL wait_rsvd                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL enb_2                            : std_logic;
  SIGNAL slv_addr_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_addr_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL databyte_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL enb_reg                          : std_logic;
  SIGNAL rw_reg                           : std_logic;
  SIGNAL mode_reg                         : std_logic;
  SIGNAL slv_addr_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_addr_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_byte_mode_reg                : std_logic;
  SIGNAL databyte_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL MUTEN_reg                        : std_logic;
  SIGNAL is_i2c_cfg_next                  : T_state_type_is_i2c_cfg;  -- enum type state_type_is_i2c_cfg (7 enums)
  SIGNAL inc_in_next                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL wait_next                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL enb_reg_next                     : std_logic;
  SIGNAL rw_reg_next                      : std_logic;
  SIGNAL mode_reg_next                    : std_logic;
  SIGNAL slv_addr_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_addr_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_byte_mode_reg_next           : std_logic;
  SIGNAL databyte_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL MUTEN_reg_next                   : std_logic;

BEGIN
  i2c_cfg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      slv_addr_reg <= to_unsigned(16#00#, 8);
      reg_addr_reg <= to_unsigned(16#00#, 8);
      reg_byte_mode_reg <= '0';
      databyte_reg <= to_unsigned(16#00#, 8);
      --Entry: I2C_SSM2603/i2c_cfg
      --Entry Internal: I2C_SSM2603/i2c_cfg
      --Transition
      is_i2c_cfg <= IN_init;
      --Entry 'init'
      --initstate
      enb_reg <= '0';
      rw_reg <= '0';
      mode_reg <= '0';
      inc_in <= to_unsigned(16#00#, 8);
      wait_rsvd <= to_unsigned(16#00000000#, 32);
      --byte_mode = 0
      --reg_mode  = 0
      MUTEN_reg <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_i2c_cfg <= is_i2c_cfg_next;
        inc_in <= inc_in_next;
        wait_rsvd <= wait_next;
        enb_reg <= enb_reg_next;
        rw_reg <= rw_reg_next;
        mode_reg <= mode_reg_next;
        slv_addr_reg <= slv_addr_reg_next;
        reg_addr_reg <= reg_addr_reg_next;
        reg_byte_mode_reg <= reg_byte_mode_reg_next;
        databyte_reg <= databyte_reg_next;
        MUTEN_reg <= MUTEN_reg_next;
      END IF;
    END IF;
  END PROCESS i2c_cfg_process;

  i2c_cfg_output : PROCESS (MUTEN_reg, busy, databyte_reg, enb_reg, inc_in, is_i2c_cfg, mode_reg, n_ack,
       reg_addr_reg, reg_byte_mode_reg, rw_reg, slv_addr_reg, wait_rsvd)
    VARIABLE y1 : signed(31 DOWNTO 0);
    VARIABLE y1_0 : signed(31 DOWNTO 0);
    VARIABLE y3 : signed(31 DOWNTO 0);
    VARIABLE y3_0 : signed(31 DOWNTO 0);
    VARIABLE add_temp : unsigned(32 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(8 DOWNTO 0);
  BEGIN
    y1 := to_signed(16#00000000#, 32);
    y1_0 := to_signed(16#00000000#, 32);
    y3 := to_signed(16#00000000#, 32);
    y3_0 := to_signed(16#00000000#, 32);
    add_temp := to_unsigned(0, 33);
    add_temp_0 := to_unsigned(16#000#, 9);
    enb_reg_next <= enb_reg;
    rw_reg_next <= rw_reg;
    mode_reg_next <= mode_reg;
    slv_addr_reg_next <= slv_addr_reg;
    reg_addr_reg_next <= reg_addr_reg;
    reg_byte_mode_reg_next <= reg_byte_mode_reg;
    databyte_reg_next <= databyte_reg;
    MUTEN_reg_next <= MUTEN_reg;
    is_i2c_cfg_next <= is_i2c_cfg;
    inc_in_next <= inc_in;
    wait_next <= wait_rsvd;
    --Gateway: I2C_SSM2603/i2c_cfg
    --During: I2C_SSM2603/i2c_cfg
    CASE is_i2c_cfg IS
      WHEN IN_end_state =>
        --During 'end_state'
        NULL;
      WHEN IN_finish1 =>
        --During 'finish1'
        IF (( NOT busy) AND ( NOT n_ack)) = '1' THEN 
          --Transition
          is_i2c_cfg_next <= IN_wait_state1;
          --Entry 'wait_state1'
          add_temp := resize(wait_rsvd, 33) + to_unsigned(1, 33);
          IF add_temp(32) /= '0' THEN 
            wait_next <= X"FFFFFFFF";
          ELSE 
            wait_next <= add_temp(31 DOWNTO 0);
          END IF;
        END IF;
      WHEN IN_init =>
        --During 'init'
        IF ( NOT busy) = '1' THEN 
          --Transition
          is_i2c_cfg_next <= IN_load_lut_data;
          --Entry 'load_lut_data'
          -- Load lut data
          enb_reg_next <= '1';
          rw_reg_next <= '0';
          reg_byte_mode_reg_next <= '0';
          slv_addr_reg_next <= to_unsigned(16#1A#, 8);
          --Graphical Function 'reg_addr'
          --Transition
          -- load lut data
          IF inc_in = to_unsigned(16#00#, 8) THEN 
            --Transition
            --Transition
            y1 := to_signed(16#0000000C#, 32);
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
          ELSE 
            --Transition
            IF inc_in = to_unsigned(16#01#, 8) THEN 
              --Transition
              --Transition
              y1 := to_signed(16#00000000#, 32);
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
            ELSE 
              --Transition
              IF inc_in = to_unsigned(16#02#, 8) THEN 
                --Transition
                --Transition
                y1 := to_signed(16#00000002#, 32);
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
              ELSE 
                --Transition
                IF inc_in = to_unsigned(16#03#, 8) THEN 
                  --Transition
                  --Transition
                  y1 := to_signed(16#00000004#, 32);
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                ELSE 
                  --Transition
                  IF inc_in = to_unsigned(16#04#, 8) THEN 
                    --Transition
                    --Transition
                    y1 := to_signed(16#00000006#, 32);
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                  ELSE 
                    --Transition
                    IF inc_in = to_unsigned(16#05#, 8) THEN 
                      --Transition
                      --Transition
                      y1 := to_signed(16#00000008#, 32);
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                    ELSE 
                      --Transition
                      IF inc_in = to_unsigned(16#06#, 8) THEN 
                        --Transition
                        --Transition
                        y1 := to_signed(16#0000000A#, 32);
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                      ELSE 
                        --Transition
                        IF inc_in = to_unsigned(16#07#, 8) THEN 
                          --Transition
                          --Transition
                          y1 := to_signed(16#0000000E#, 32);
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                        ELSE 
                          --Transition
                          IF inc_in = to_unsigned(16#08#, 8) THEN 
                            --Transition
                            --Transition
                            y1 := to_signed(16#00000010#, 32);
                            --Transition
                            --Transition
                            --Transition
                            --Transition
                          ELSE 
                            --Transition
                            IF inc_in = to_unsigned(16#09#, 8) THEN 
                              --Transition
                              --Transition
                              y1 := to_signed(16#0000000C#, 32);
                              --Transition
                              --Transition
                              --Transition
                            ELSE 
                              --Transition
                              y1 := to_signed(16#00000000#, 32);
                            END IF;
                          END IF;
                        END IF;
                      END IF;
                    END IF;
                  END IF;
                END IF;
              END IF;
            END IF;
          END IF;
          --Transition
          reg_addr_reg_next <= unsigned(y1(7 DOWNTO 0));
          --Graphical Function 'reg_data'
          --Transition
          -- load lut data
          IF inc_in = to_unsigned(16#00#, 8) THEN 
            --Transition
            --Transition
            y3 := to_signed(16#00000010#, 32);
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
          ELSE 
            --Transition
            IF inc_in = to_unsigned(16#01#, 8) THEN 
              --Transition
              --Transition
              y3 := to_signed(16#00000017#, 32);
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
            ELSE 
              --Transition
              IF inc_in = to_unsigned(16#02#, 8) THEN 
                --Transition
                --Transition
                y3 := to_signed(16#00000017#, 32);
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
              ELSE 
                --Transition
                IF inc_in = to_unsigned(16#03#, 8) THEN 
                  --Transition
                  --Transition
                  y3 := to_signed(16#00000079#, 32);
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                ELSE 
                  --Transition
                  IF inc_in = to_unsigned(16#04#, 8) THEN 
                    --Transition
                    --Transition
                    y3 := to_signed(16#00000079#, 32);
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                  ELSE 
                    --Transition
                    IF inc_in = to_unsigned(16#05#, 8) THEN 
                      --Transition
                      --Transition
                      y3 := to_signed(16#00000012#, 32);
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                    ELSE 
                      --Transition
                      IF inc_in = to_unsigned(16#06#, 8) THEN 
                        --Transition
                        --Transition
                        y3 := to_signed(16#00000006#, 32);
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                      ELSE 
                        --Transition
                        IF inc_in = to_unsigned(16#07#, 8) THEN 
                          --Transition
                          --Transition
                          y3 := to_signed(16#0000004A#, 32);
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                        ELSE 
                          --Transition
                          IF inc_in = to_unsigned(16#08#, 8) THEN 
                            --Transition
                            --Transition
                            y3 := to_signed(16#00000020#, 32);
                            --Transition
                            --Transition
                            --Transition
                            --Transition
                          ELSE 
                            --Transition
                            IF inc_in = to_unsigned(16#09#, 8) THEN 
                              --Transition
                              --Transition
                              y3 := to_signed(16#00000000#, 32);
                              --Transition
                              --Transition
                              --Transition
                            ELSE 
                              --Transition
                              y3 := to_signed(16#00000000#, 32);
                            END IF;
                          END IF;
                        END IF;
                      END IF;
                    END IF;
                  END IF;
                END IF;
              END IF;
            END IF;
          END IF;
          --Transition
          databyte_reg_next <= unsigned(y3(7 DOWNTO 0));
        END IF;
      WHEN IN_load_last_reg =>
        slv_addr_reg_next <= to_unsigned(16#1A#, 8);
        --During 'load_last_reg'
        IF enb_reg = '1' THEN 
          --Transition
          is_i2c_cfg_next <= IN_end_state;
          --Entry 'end_state'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_load_lut_data =>
        slv_addr_reg_next <= to_unsigned(16#1A#, 8);
        --During 'load_lut_data'
        IF (( NOT busy) AND ( NOT n_ack)) = '1' THEN 
          --Transition
          is_i2c_cfg_next <= IN_lut_incr1;
          --Entry 'lut_incr1'
          add_temp_0 := resize(inc_in, 9) + to_unsigned(16#001#, 9);
          IF add_temp_0(8) /= '0' THEN 
            inc_in_next <= "11111111";
          ELSE 
            inc_in_next <= add_temp_0(7 DOWNTO 0);
          END IF;
        END IF;
      WHEN IN_lut_incr1 =>
        --During 'lut_incr1'
        IF (hdlcoder_to_stdlogic(inc_in < to_unsigned(16#0A#, 8)) AND ( NOT busy)) = '1' THEN 
          --Transition
          is_i2c_cfg_next <= IN_load_lut_data;
          --Entry 'load_lut_data'
          -- Load lut data
          enb_reg_next <= '1';
          rw_reg_next <= '0';
          reg_byte_mode_reg_next <= '0';
          slv_addr_reg_next <= to_unsigned(16#1A#, 8);
          --Graphical Function 'reg_addr'
          --Transition
          -- load lut data
          IF inc_in = to_unsigned(16#00#, 8) THEN 
            --Transition
            --Transition
            y1_0 := to_signed(16#0000000C#, 32);
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
          ELSE 
            --Transition
            IF inc_in = to_unsigned(16#01#, 8) THEN 
              --Transition
              --Transition
              y1_0 := to_signed(16#00000000#, 32);
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
            ELSE 
              --Transition
              IF inc_in = to_unsigned(16#02#, 8) THEN 
                --Transition
                --Transition
                y1_0 := to_signed(16#00000002#, 32);
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
              ELSE 
                --Transition
                IF inc_in = to_unsigned(16#03#, 8) THEN 
                  --Transition
                  --Transition
                  y1_0 := to_signed(16#00000004#, 32);
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                ELSE 
                  --Transition
                  IF inc_in = to_unsigned(16#04#, 8) THEN 
                    --Transition
                    --Transition
                    y1_0 := to_signed(16#00000006#, 32);
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                  ELSE 
                    --Transition
                    IF inc_in = to_unsigned(16#05#, 8) THEN 
                      --Transition
                      --Transition
                      y1_0 := to_signed(16#00000008#, 32);
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                    ELSE 
                      --Transition
                      IF inc_in = to_unsigned(16#06#, 8) THEN 
                        --Transition
                        --Transition
                        y1_0 := to_signed(16#0000000A#, 32);
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                      ELSE 
                        --Transition
                        IF inc_in = to_unsigned(16#07#, 8) THEN 
                          --Transition
                          --Transition
                          y1_0 := to_signed(16#0000000E#, 32);
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                        ELSE 
                          --Transition
                          IF inc_in = to_unsigned(16#08#, 8) THEN 
                            --Transition
                            --Transition
                            y1_0 := to_signed(16#00000010#, 32);
                            --Transition
                            --Transition
                            --Transition
                            --Transition
                          ELSE 
                            --Transition
                            IF inc_in = to_unsigned(16#09#, 8) THEN 
                              --Transition
                              --Transition
                              y1_0 := to_signed(16#0000000C#, 32);
                              --Transition
                              --Transition
                              --Transition
                            ELSE 
                              --Transition
                              y1_0 := to_signed(16#00000000#, 32);
                            END IF;
                          END IF;
                        END IF;
                      END IF;
                    END IF;
                  END IF;
                END IF;
              END IF;
            END IF;
          END IF;
          --Transition
          reg_addr_reg_next <= unsigned(y1_0(7 DOWNTO 0));
          --Graphical Function 'reg_data'
          --Transition
          -- load lut data
          IF inc_in = to_unsigned(16#00#, 8) THEN 
            --Transition
            --Transition
            y3_0 := to_signed(16#00000010#, 32);
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
            --Transition
          ELSE 
            --Transition
            IF inc_in = to_unsigned(16#01#, 8) THEN 
              --Transition
              --Transition
              y3_0 := to_signed(16#00000017#, 32);
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
              --Transition
            ELSE 
              --Transition
              IF inc_in = to_unsigned(16#02#, 8) THEN 
                --Transition
                --Transition
                y3_0 := to_signed(16#00000017#, 32);
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
                --Transition
              ELSE 
                --Transition
                IF inc_in = to_unsigned(16#03#, 8) THEN 
                  --Transition
                  --Transition
                  y3_0 := to_signed(16#00000079#, 32);
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                  --Transition
                ELSE 
                  --Transition
                  IF inc_in = to_unsigned(16#04#, 8) THEN 
                    --Transition
                    --Transition
                    y3_0 := to_signed(16#00000079#, 32);
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                    --Transition
                  ELSE 
                    --Transition
                    IF inc_in = to_unsigned(16#05#, 8) THEN 
                      --Transition
                      --Transition
                      y3_0 := to_signed(16#00000012#, 32);
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                      --Transition
                    ELSE 
                      --Transition
                      IF inc_in = to_unsigned(16#06#, 8) THEN 
                        --Transition
                        --Transition
                        y3_0 := to_signed(16#00000006#, 32);
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                        --Transition
                      ELSE 
                        --Transition
                        IF inc_in = to_unsigned(16#07#, 8) THEN 
                          --Transition
                          --Transition
                          y3_0 := to_signed(16#0000004A#, 32);
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                          --Transition
                        ELSE 
                          --Transition
                          IF inc_in = to_unsigned(16#08#, 8) THEN 
                            --Transition
                            --Transition
                            y3_0 := to_signed(16#00000020#, 32);
                            --Transition
                            --Transition
                            --Transition
                            --Transition
                          ELSE 
                            --Transition
                            IF inc_in = to_unsigned(16#09#, 8) THEN 
                              --Transition
                              --Transition
                              y3_0 := to_signed(16#00000000#, 32);
                              --Transition
                              --Transition
                              --Transition
                            ELSE 
                              --Transition
                              y3_0 := to_signed(16#00000000#, 32);
                            END IF;
                          END IF;
                        END IF;
                      END IF;
                    END IF;
                  END IF;
                END IF;
              END IF;
            END IF;
          END IF;
          --Transition
          databyte_reg_next <= unsigned(y3_0(7 DOWNTO 0));
        ELSIF inc_in = to_unsigned(16#0A#, 8) THEN 
          --Transition
          is_i2c_cfg_next <= IN_finish1;
          --Entry 'finish1'
          enb_reg_next <= '0';
        END IF;
      WHEN OTHERS => 
        --case IN_wait_state1:
        --During 'wait_state1'
        IF ((( NOT busy) AND ( NOT n_ack)) AND hdlcoder_to_stdlogic(wait_rsvd = to_unsigned(800000, 32))) = '1' THEN 
          --Transition
          is_i2c_cfg_next <= IN_load_last_reg;
          --Entry 'load_last_reg'
          --Load last register 
          enb_reg_next <= '1';
          rw_reg_next <= '0';
          mode_reg_next <= '0';
          slv_addr_reg_next <= to_unsigned(16#1A#, 8);
          reg_byte_mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#12#, 8);
          databyte_reg_next <= to_unsigned(16#01#, 8);
        ELSIF ((( NOT busy) AND ( NOT n_ack)) AND hdlcoder_to_stdlogic(wait_rsvd /= to_unsigned(800000, 32))) = '1' THEN 
          --Transition
          is_i2c_cfg_next <= IN_finish1;
          --Entry 'finish1'
          enb_reg_next <= '0';
        END IF;
    END CASE;
  END PROCESS i2c_cfg_output;

  enb_2 <= enb_reg_next;
  rw <= rw_reg_next;
  mode <= mode_reg_next;
  slv_addr_tmp <= slv_addr_reg_next;
  reg_addr_tmp <= reg_addr_reg_next;
  reg_byte_mode <= reg_byte_mode_reg_next;
  databyte_tmp <= databyte_reg_next;
  MUTEN <= MUTEN_reg_next;

  slv_addr <= std_logic_vector(slv_addr_tmp);

  reg_addr <= std_logic_vector(reg_addr_tmp);

  databyte <= std_logic_vector(databyte_tmp);

  enb_1 <= enb_2;

END rtl;

