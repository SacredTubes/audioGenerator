-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hdlcoder_I2S_ssm2603\I2S_SSM2603_src_I2S_controller.vhd
-- Created: 2020-11-19 16:00:29
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: I2S_SSM2603_src_I2S_controller
-- Source Path: hdlcoder_I2S_ssm2603/Subsystem/I2S_Subsystem/I2S_controller
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY I2S_SSM2603_src_I2S_controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Audio_left_in                     :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        Audio_right_in                    :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        BCLK                              :   IN    std_logic;  -- ufix1
        Serial_data_in                    :   IN    std_logic;  -- ufix1
        RECLK                             :   IN    std_logic;  -- ufix1
        PBCLK                             :   IN    std_logic;  -- ufix1
        Audio_left_out                    :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        Audio_right_out                   :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        new_sample                        :   OUT   std_logic;
        Serial_data_out                   :   OUT   std_logic  -- ufix1
        );
END I2S_SSM2603_src_I2S_controller;


ARCHITECTURE rtl OF I2S_SSM2603_src_I2S_controller IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL Audio_left_in_unsigned           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_right_in_unsigned          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_left_out_tmp               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_right_out_tmp              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BCLK_shiftreg                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sr_in_shiftreg                   : unsigned(126 DOWNTO 0);  -- ufix127
  SIGNAL sr_out_shiftreg                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL RECLK_reg                        : std_logic;  -- ufix1
  SIGNAL PBCLK_reg                        : std_logic;  -- ufix1
  SIGNAL sr_in_reg                        : std_logic;  -- ufix1
  SIGNAL Audio_left_out_reg               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_right_out_reg              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Serial_data_out_reg              : std_logic;  -- ufix1
  SIGNAL BCLK_shiftreg_next               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sr_in_shiftreg_next              : unsigned(126 DOWNTO 0);  -- ufix127
  SIGNAL sr_out_shiftreg_next             : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL RECLK_reg_next                   : std_logic;  -- ufix1
  SIGNAL PBCLK_reg_next                   : std_logic;  -- ufix1
  SIGNAL sr_in_reg_next                   : std_logic;  -- ufix1
  SIGNAL Audio_left_out_reg_next          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_right_out_reg_next         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Serial_data_out_reg_next         : std_logic;  -- ufix1

BEGIN
  Audio_left_in_unsigned <= unsigned(Audio_left_in);

  Audio_right_in_unsigned <= unsigned(Audio_right_in);

  I2S_controller_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BCLK_shiftreg <= to_unsigned(16#000#, 10);
      sr_in_shiftreg <= to_unsigned(0, 127);
      sr_out_shiftreg <= to_unsigned(0, 64);
      RECLK_reg <= '0';
      PBCLK_reg <= '0';
      sr_in_reg <= '0';
      Audio_left_out_reg <= to_unsigned(16#000000#, 24);
      Audio_right_out_reg <= to_unsigned(16#000000#, 24);
      Serial_data_out_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BCLK_shiftreg <= BCLK_shiftreg_next;
        sr_in_shiftreg <= sr_in_shiftreg_next;
        sr_out_shiftreg <= sr_out_shiftreg_next;
        RECLK_reg <= RECLK_reg_next;
        PBCLK_reg <= PBCLK_reg_next;
        sr_in_reg <= sr_in_reg_next;
        Audio_left_out_reg <= Audio_left_out_reg_next;
        Audio_right_out_reg <= Audio_right_out_reg_next;
        Serial_data_out_reg <= Serial_data_out_reg_next;
      END IF;
    END IF;
  END PROCESS I2S_controller_process;

  I2S_controller_output : PROCESS (Audio_left_in_unsigned, Audio_left_out_reg, Audio_right_in_unsigned,
       Audio_right_out_reg, BCLK, BCLK_shiftreg, PBCLK, PBCLK_reg, RECLK,
       RECLK_reg, Serial_data_in, Serial_data_out_reg, sr_in_reg,
       sr_in_shiftreg, sr_out_shiftreg)
    VARIABLE sr_in_shiftreg_temp : unsigned(126 DOWNTO 0);
  BEGIN
    sr_in_shiftreg_temp := sr_in_shiftreg;
    sr_out_shiftreg_next <= sr_out_shiftreg;
    RECLK_reg_next <= RECLK_reg;
    PBCLK_reg_next <= PBCLK_reg;
    Audio_left_out_reg_next <= Audio_left_out_reg;
    Audio_right_out_reg_next <= Audio_right_out_reg;
    Serial_data_out_reg_next <= Serial_data_out_reg;
    new_sample <= '0';
    -- detect rising edge of BCLK
    -- push the input data into input shift register
    IF BCLK_shiftreg(9 DOWNTO 8) = to_unsigned(16#2#, 2) THEN 
      sr_in_shiftreg_temp := sr_in_shiftreg(125 DOWNTO 0) & sr_in_reg;
    END IF;
    -- if there is rising edge of BCLK 9 clock cycle ago, it menas it is near
    -- the falling edge of the BCLK
    IF BCLK_shiftreg(1 DOWNTO 0) = to_unsigned(16#2#, 2) THEN 
      -- push out output data from output shift register
      Serial_data_out_reg_next <= sr_out_shiftreg(63);
      -- rising edge of RECLK
      IF (RECLK = '1') AND (RECLK_reg = '0') THEN 
        Audio_left_out_reg_next <= sr_in_shiftreg_temp(126 DOWNTO 103);
        Audio_right_out_reg_next <= sr_in_shiftreg_temp(94 DOWNTO 71);
        new_sample <= '1';
      END IF;
      -- rising edge of PBCLK
      IF (PBCLK = '1') AND (PBCLK_reg = '0') THEN 
        sr_out_shiftreg_next <= Audio_left_in_unsigned & "00000000" & (Audio_right_in_unsigned & "00000000");
      ELSE 
        sr_out_shiftreg_next <= sr_out_shiftreg(62 DOWNTO 0) & '0';
      END IF;
      RECLK_reg_next <= RECLK;
      PBCLK_reg_next <= PBCLK;
    END IF;
    -- store BCLK in shift register
    BCLK_shiftreg_next <= BCLK & BCLK_shiftreg(9 DOWNTO 1);
    sr_in_reg_next <= Serial_data_in;
    Audio_left_out_tmp <= Audio_left_out_reg;
    Audio_right_out_tmp <= Audio_right_out_reg;
    Serial_data_out <= Serial_data_out_reg;
    sr_in_shiftreg_next <= sr_in_shiftreg_temp;
  END PROCESS I2S_controller_output;


  Audio_left_out <= std_logic_vector(Audio_left_out_tmp);

  Audio_right_out <= std_logic_vector(Audio_right_out_tmp);

END rtl;

