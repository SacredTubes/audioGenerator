-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hdlcoder_I2S_ssm2603\I2S_SSM2603_src_Subsystem.vhd
-- Created: 2020-11-19 16:00:29
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Serial_data_out               ce_out        1
-- Audio_out_data                ce_out        1
-- Audio_out_valid               ce_out        1
-- Dammy                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: I2S_SSM2603_src_Subsystem
-- Source Path: hdlcoder_I2S_ssm2603/Subsystem
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY I2S_SSM2603_src_Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Bit_clock                         :   IN    std_logic;  -- ufix1
        RECLK                             :   IN    std_logic;  -- ufix1
        Serial_data_in                    :   IN    std_logic;  -- ufix1
        Audio_in_data                     :   IN    std_logic_vector(47 DOWNTO 0);  -- ufix48
        Audio_in_valid                    :   IN    std_logic;
        PBCLK                             :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        Serial_data_out                   :   OUT   std_logic;  -- ufix1
        Audio_out_data                    :   OUT   std_logic_vector(47 DOWNTO 0);  -- ufix48
        Audio_out_valid                   :   OUT   std_logic;
        Dammy                             :   OUT   std_logic  -- ufix1
        );
END I2S_SSM2603_src_Subsystem;


ARCHITECTURE rtl OF I2S_SSM2603_src_Subsystem IS

  -- Component Declarations
  COMPONENT I2S_SSM2603_src_Bit_Slice
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(47 DOWNTO 0);  -- ufix48
          In2                             :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          Out2                            :   OUT   std_logic_vector(23 DOWNTO 0)  -- ufix24
          );
  END COMPONENT;

  COMPONENT I2S_SSM2603_src_I2S_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Audio_left_in                   :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          Audio_right_in                  :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          BCLK                            :   IN    std_logic;  -- ufix1
          Serial_data_in                  :   IN    std_logic;  -- ufix1
          RECLK                           :   IN    std_logic;  -- ufix1
          PBCLK                           :   IN    std_logic;  -- ufix1
          Audio_left_out                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          Audio_right_out                 :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          new_sample                      :   OUT   std_logic;
          Serial_data_out                 :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : I2S_SSM2603_src_Bit_Slice
    USE ENTITY work.I2S_SSM2603_src_Bit_Slice(rtl);

  FOR ALL : I2S_SSM2603_src_I2S_Subsystem
    USE ENTITY work.I2S_SSM2603_src_I2S_Subsystem(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Bit_Slice_out1                   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice_out2                   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_left_out                   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_right_out                  : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL new_sample                       : std_logic;
  SIGNAL Serial_data_out_1                : std_logic;  -- ufix1
  SIGNAL Audio_left_out_unsigned          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Audio_right_out_unsigned         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1                  : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL Delay_out1                       : std_logic;  -- ufix1

BEGIN
  u_Bit_Slice : I2S_SSM2603_src_Bit_Slice
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Audio_in_data,  -- ufix48
              In2 => Audio_in_valid,
              Out1 => Bit_Slice_out1,  -- ufix24
              Out2 => Bit_Slice_out2  -- ufix24
              );

  u_I2S_Subsystem : I2S_SSM2603_src_I2S_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Audio_left_in => Bit_Slice_out1,  -- ufix24
              Audio_right_in => Bit_Slice_out2,  -- ufix24
              BCLK => Bit_clock,  -- ufix1
              Serial_data_in => Serial_data_in,  -- ufix1
              RECLK => RECLK,  -- ufix1
              PBCLK => PBCLK,  -- ufix1
              Audio_left_out => Audio_left_out,  -- ufix24
              Audio_right_out => Audio_right_out,  -- ufix24
              new_sample => new_sample,
              Serial_data_out => Serial_data_out_1  -- ufix1
              );

  Audio_left_out_unsigned <= unsigned(Audio_left_out);

  Audio_right_out_unsigned <= unsigned(Audio_right_out);

  Bit_Concat_out1 <= Audio_left_out_unsigned & Audio_right_out_unsigned;

  Audio_out_data <= std_logic_vector(Bit_Concat_out1);

  enb <= clk_enable;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Serial_data_out_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  ce_out <= clk_enable;

  Serial_data_out <= Serial_data_out_1;

  Audio_out_valid <= new_sample;

  Dammy <= Delay_out1;

END rtl;

